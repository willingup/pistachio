#实现分类的作用
import tensorflow as tf 
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets('MNIST_data',one_hot=True) #如果电脑上没有数据包呢会从网上下载


#添加层的一个函数
def add_layer(inputs,in_size,out_size,activation_function=None):
    Weights = tf.Variable(tf.random_normal([in_size.out_size])) #是一个矩阵
    biases = tf.Variable(tf.zeros(1,out_size)+ 0.1)   #1行out_size列
    Wx_plus_b = tf.matmul(inputs,Weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs

#定义一个准确率的函数
def compute_accuracy(v_xs,v_ys):
    global prediction
    y_pre = sess.run(prediction,feed_dict={xs:v_xs})  #生成预测值
    correct_prediction = tf.equal(tf.argmax(y_pre,1),tf.argmax(v_ys,1))
    accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))
    result = sess.run(accuracy,feed_dict={xs:v_xs,ys:v_ys})
    return result #输出的是百分比

#define placeholder for input to network
xs = tf.placeholder(tf.float32,[None,784]) #不规定它有多少个但是规定每一个数据的大小
ys = tf.placeholder(tf.float32,[None,10])

#add output layer
prediction = add_layer(xs,784,10,activation_function=tf.nn.softmax)

#the error between prediction and real data（loss）
cross_entropy = tf.reduce_mean(-tf.reduce_sum(ys * tf.log(prediction),reduction_indices=[1])) 
train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy) #不懂
sess = tf.Session()

#important step
sess.run(tf.initialize_all_variables())

for i in range(1000):
    batch_xs,batch_ys = minist.train.next_batch(100)              #不是学习全部，而是学习一部分，一次学习100个
    sess.run(train_step,feed_dict={xs:batch_xs,ys:batch_ys})
    if i % 50 == 0:
        print(compute_accurary(mnist.test.images,mnist.test.labels))
