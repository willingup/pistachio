#搭建 一个神经网络
import tensorflow as tf 

#添加层的一个函数
def add_layer(inputs,in_size,out_size,activation_function=None)
    Weights = tf.Variable(tf.random_normal([in_size.out_size])) #是一个矩阵
    biases = tf.Variable(tf.zeros(1,out_size)+ 0.1)   #1行out_size列
    Wx_plus_b = tf.matmul(inputs,Weights) + biases
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs

#定义好数据    
x_data = np.linspace(-1,1,300)[:,np.newaxis]
noise = np.random.normal(0,0.05,x_data.shape)  #
y_data = np.square(x_data)-0.5 + noise


xs = tf.placeholder(tf.float32,[None,1])
ys = tf.placeholder(tf.float32,[None,1])

l1 = add_layer(xs,1,10,activation_function=tf.nn.relu)
prediction = add_layer(l1,10,1,activation_function=None)

loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[1])) #误差求平均，求和
train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)#学习率 0.1  Optimizer 优化器

init = tf.initialize_all_variables()
sess = tf.Session()
sess.run(init)

for i in range(1000):
    sess.run(train_step,feed_dict={xs:x_data,ys:y_data}) #一切计算是从see.run 开始
    if i % 50 == 0:
        print(sess.run(loss,feed_dict={xs:x_data,ys:y_data}))    
