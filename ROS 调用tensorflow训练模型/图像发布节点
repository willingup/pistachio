#调用其他人写的
#用ROS调用tensorflow训练pb模型做实时语义分割（Python实现）
#需要实现的功能：编写一个图像发布节点，一个图像接收节点，接收节点在订阅发布节点的图像后进行语义分割处理，再将分割结果进行发布。


#图像发布节点
#发布的话题名称是camera/image_raw，因为我的ENet模型处理的原始输入尺寸为640（w）*480（h），因此我将输出的尺寸定为640*480

#!/usr/bin/env python
#!coding=utf-8
import rospy
from std_msgs.msg import Header
from sensor_msgs.msg import Image
import cv2
from cv_bridge import CvBridge,CvBridgeError
import numpy as np
import sys
 
def image_pub():
    rospy.init_node('image_pub', anonymous=True)
    pub = rospy.Publisher('camera/image_raw', Image, queue_size=2) 
    rate = rospy.Rate(5)
    #定义发布器pub，发布的题目是camera/image_raw，消息类型是Image，然后queue_size是在订阅者接受消息不够快的时候保留的消息的数量，如果对qos要求低的话可以设为0，不设置的话会出个报警，不过不会出错
   
    cap = cv2.VideoCapture(0)
    #参数为0，表示打开笔记本内置的摄像头
    bridge = CvBridge()
    
    if not cap.isOpened():
        sys.stdout.write("Camera is failed to use!")
 
    count = 0
    while not rospy.is_shutdown():
        ret, frame = cap.read()
        #cap.read 按帧读取视频
        #ret,frame是获cap.read()方法的两个返回值。其中ret是布尔值，如果读取帧是正确的则返回True，如果文件读取到结尾，它的返回值就为False。frame就是每一帧的图像，是个三维矩阵
       
        if ret:
            count = count + 1
        else:
            rospy.loginfo("Capturing image failed.")
        if count == 2:
            count = 0
            frame = cv2.resize(frame,(640,480))  
            #图像的压缩，尺寸为（640,480）
            print(type(frame))
            img_msg = bridge.cv2_to_imgmsg(frame, encoding="bgr8")  #ros转为cv
            pub.publish(img_msg)      
            #将img_msg发布出去
            print("[info]Publishing image now..")
        rate.sleep() #可以设定循环的频率
 
if __name__ == '__main__':
    try:
        image_pub()
    except rospy.ROSInterruptException:
        pass
